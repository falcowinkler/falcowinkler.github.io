#+TITLE: Baustein 3 Meeting 1

Willkommen zum Python Kurs 3! In den vier Terminen geht es darum Python in der Tiefe kennenzulernen, 
aber auch genereller um das algorithmische Lösen von Problemen.

- Ich verwende im Kurs die IDE [[https://thonny.org][thonny]], welche gut für Anfänger geeignet ist. Ihr könnt aber gerne eure eigene Entwicklungsumgebung verwenden.
- Bei Abwesenheit können wir die Sitzungen aufnehmen (wenn alle einverstanden sind), sagt einfach bescheid.
- Wie auch in den letzten Kursen ist ein Teil der Übungen von [[http://www.codewars.com/r/iQ48PQ][codewars]] "katas" inspiriert. Diese sind entsprechend verlinkt. Ihr könnt gerne auch auf der Website trainieren ([[http://www.codewars.com/r/iQ48PQ][*klick*]]), um zu prüfen ob eure Lösungen korrekt sind, und andere Lösungen zu sehen, müsst es aber nicht.
* Warmup
** Übung: FLAME game

Schreibt eine Funktion ~flame_game(name1, name2)~, welche zwei Namen als Zeichenkette entgegennimmt,
und dann den Status der Liebesbeziehung zwischen diesen zwei Namen ausgibt.

Der Status wird so berechnet:

- Erst werden alle Buchstaben entfernt die in beiden Zeichenketten enthalten sind 
(Groß-Kleinschreibung wird nicht beachtet).
- Die Länge der beiden Zeichenketten wird addiert.
- Die Entstehende Zahl wird verwendet um die Antwortoption auszugeben.
Ist die Zahl größer als 6 geht es wieder von vorne los.

#+BEGIN_SRC python
F = Friendship (1)
L = Love (2)
A = Affection (3)
M = Marriage (4)
E = Enemies (5)
S = Siblings (6)
#+END_SRC

Beispiel: 

#+BEGIN_SRC python
flame_game("NEIL", "MAGDALENA") # Enemies
#+END_SRC

- Duplikate entfernen: I, MAGDAA
- Längen addieren: $1 + 6 = 7$
- 7 Steht für "Friendship" (7 Ist hinter der 6, es geht also ab da von vorne los)

[[https://www.codewars.com/kata/553e0c3c8b8c2e1745000005][(referenz, nur Java)]]

* Objektorientierte Programmierung

** Wiederholung der Basics
   Objektorientierte Programmierung bezeichnet ein Methode für die Strukturierung von Programmen.
Hierbei werden Zustände und Funktionalität in Objekte gekapselt und das Programm somit in
Komponenten aufgeteilt. Diese Vorgehensweise, richtig angewandt, verbessert die Wiederverwendbarkeit, Lesbarkeit 
und Wartbarkeit von Programmcode.

[[file:part1_4.org][Wiederholung aus Kurs 1]]
 
** Übung (Funktionen+Objekte): Trip-Kosten
Die nächste Urlaubsplanung steht an, und ihr wollt mit euren Freunden eine Roadtrip in den USA machen.
Amerika hat komische Gesetze, zum Beispiel dass sich die Kosten eines Hotels (für eine Nacht) aus der Anzahl der Vokale
~(aeiou)~ berechnet.
Dafür schreibt ihr erstmal eine Funktion ~hotel_cost(hotel_name)~ die die Anzahl von Vokalen im Namen zurück gibt.
Beispiel:
#+BEGIN_SRC python
print(hotel_cost("alabama inn")) # 5
#+END_SRC

Um die Nächte und Anzahl an Personen für den Trip zu speichern, habt ihr schon eine Klasse geschrieben:

#+BEGIN_SRC python
class Stay:

    def __init__(self, hotel, nights, people):
        self.hotel = hotel
        self.nights = nights
        self.people = people
#+END_SRC

Jetzt müsst ihr nur noch eine Funktion ~trip_cost(stays)~ schreiben, um die Gesamtkosten der Reise zu berechnen.
Beispiel:
#+BEGIN_SRC python
print(trip_cost([Stay("alabama inn", 6, 2), Stay("kentucky ranch", 3, 5)])) # 105
#+END_SRC

Tipps:
- Um auf ein Attribut eines Objekts zuzugreifen, einfach die Punktnotation verwenden:
#+BEGIN_SRC python :results output :exports both
my_stay = Stay("alabama inn", 6, 2)
print(my_stay.hotel)
#+END_SRC
- Um zu prüfen ob ein Buchstabe ein Vokal ist:
#+BEGIN_SRC python :results output :exports both
print("a" in "aeiou")
print("c" in "aeiou")
#+END_SRC

