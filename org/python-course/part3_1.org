#+TITLE: Baustein 3 Meeting 1

Willkommen zum Python Kurs 3! In den vier Terminen geht es darum Python in der Tiefe kennenzulernen, 
aber auch genereller um das algorithmische Lösen von Problemen.

- Ich verwende im Kurs die IDE [[https://thonny.org][thonny]], welche gut für Anfänger geeignet ist. Ihr könnt aber gerne eure eigene Entwicklungsumgebung verwenden.
- Bei Abwesenheit können wir die Sitzungen aufnehmen (wenn alle einverstanden sind), sagt einfach bescheid.
- Wie auch in den letzten Kursen ist ein Teil der Übungen von [[http://www.codewars.com/r/iQ48PQ][codewars]] "katas" inspiriert. Diese sind entsprechend verlinkt. Ihr könnt gerne auch auf der Website trainieren ([[http://www.codewars.com/r/iQ48PQ][*klick*]]), um zu prüfen ob eure Lösungen korrekt sind, und andere Lösungen zu sehen, müsst es aber nicht.
* Warmup
** Übung: FLAME game

Schreibt eine Funktion ~flame_game(name1, name2)~, welche zwei Namen als Zeichenkette entgegennimmt,
und dann den Status der Liebesbeziehung zwischen diesen zwei Namen ausgibt.

Der Status wird so berechnet:

- Erst werden alle Buchstaben entfernt die in beiden Zeichenketten enthalten sind 
(Groß-Kleinschreibung wird nicht beachtet).
- Die Länge der beiden Zeichenketten wird addiert.
- Die Entstehende Zahl wird verwendet um die Antwortoption auszugeben.
Ist die Zahl größer als 6 geht es wieder von vorne los.

#+BEGIN_SRC python
F = Friendship (1)
L = Love (2)
A = Affection (3)
M = Marriage (4)
E = Enemies (5)
S = Siblings (6)
#+END_SRC

Beispiel: 

#+BEGIN_SRC python
flame_game("NEIL", "MAGDALENA") # Enemies
#+END_SRC

- Duplikate entfernen: I, MAGDAA
- Längen addieren: $1 + 6 = 7$
- 7 Steht für "Friendship" (7 Ist hinter der 6, es geht also ab da von vorne los)

[[https://www.codewars.com/kata/553e0c3c8b8c2e1745000005][(referenz, nur Java)]]

* Objektorientierte Programmierung

** Wiederholung der Basics
   Objektorientierte Programmierung bezeichnet ein Methode für die Strukturierung von Programmen.
Hierbei werden Zustände und Funktionalität in Objekte gekapselt und das Programm somit in
Komponenten aufgeteilt. Diese Vorgehensweise, richtig angewandt, verbessert die Wiederverwendbarkeit, Lesbarkeit 
und Wartbarkeit von Programmcode.

[[file:part1_4.org][Wiederholung aus Kurs 1]]
 
** Übung: Highscore Liste

Ihr programmiert ein neues Spiel "Kampf gegen den Kakadu", und wollt dem Spieler 
mit einer typischen Highscore-Liste einen Anreiz geben sich wieder und wieder zu verbessern.

- Bei der Erzeugung der Liste wird die maximale Größe angegeben
- Die Methode ~update~ nimmt eine neue Punktezahl auf und fügt sie der Liste hinzu.
Dabei soll die Liste stets sortiert sein, und nie die Maximalkapazität überschreiten.
- Reset löscht die gesamte Liste.

#+BEGIN_SRC python :results output :exports both
highScoreTable = HighScoreTable(3)
print(highScoreTable.scores) # []
highScoreTable.update(10)
print(highScoreTable.scores) # [10]
highScoreTable.update(8)
highScoreTable.update(12)
highScoreTable.update(5)
highScoreTable.update(10)
print(highScoreTable.scores) # [12, 10, 10]
highScoreTable.reset()
print(highScoreTable.scores) # []
#+END_SRC
[[https://www.codewars.com/kata/5962bbea6878a381ed000036][(referenz)]]

** Vererbung
 
- Einige Klassen haben Gemeinsamkeiten und Unterschiede
- Die Gemeinsamkeiten wollen wir nicht doppelt in Code ausdrücken
- Deshalb erstellen wir eine “Elternklasse” mit den Gemeinsamkeiten und “erben” davon.
- Wir können dabei methoden der Überklasse aufrufen, dies gilt auch für ~__init__~.

#+BEGIN_SRC python :results output :exports both
class Animal:

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def eat(self):
        print(self.name + " isst etwas.")

    def move(self):
        print(self.name + " bewegt sich.")

class Bird(Animal):

    def fly(self):
        print("Ich kann flieeeegen - " + self.name + ".")

class Dog(Animal):

    def bark(self):
        print("Woof Woof")


class Mops(Dog):

    def bark(self):
        super().bark()
        print("fiep")

class Parrot(Bird):

    def __init__(self, name, age, color):
        super().__init__(name, age)
        self.color = color


loewe = Animal("Löwe", 5)
loewe.eat()
loewe.move()
print("-------------")
doggie = Dog("Doggie", 7)
doggie.bark()
doggie.eat()
print("-------------")
ruffi = Mops("Ruffi", 3)
ruffi.eat()
ruffi.bark()
#+END_SRC

** Übung: Vererbung

Nach dem Erfolg eures ersten Spiels "Kampf gegen den Kakadu" 
wollt ihr nun ein weiteres Spiel "Tucan vs. Pflanzen" programmieren.
Hier gibt es zwei Minispiele, einmal ist eine Niedrige Punktzahl besser, 
in dem anderen eine hohe Punktzahl. 

Ihr entscheidet euch die `HighScoreTable` aus der vorherigen Übung wiederzuverwenden,
aber bei der Erzeugung soll nun ein Parameter ~highest_first~ angegeben werden, der per default immer
auf ~True~ gesetzt ist. Basierend auf dem Parameter soll dann die Ordnung in der Liste entprechend angepasst werden.

#+BEGIN_SRC python :results output :exports both
highScoreTable = HighScoreTable(3)
print(highScoreTable.scores) # []
highScoreTable.update(10)
print(highScoreTable.scores) # [10]
highScoreTable.update(8)
highScoreTable.update(12)
highScoreTable.update(5)
highScoreTable.update(10)
print(highScoreTable.scores) # [10, 10, 12]
highScoreTable.reset()
print(highScoreTable.scores) # []
#+END_SRC
* Higher order Funktionen, Lambda-Funktionen
In Python können Funktionen genau so wie andere Werte als Variablen weitergegeben und in 
Datenstrukturen (z.B. Listen) gespeichert werden.
Zum Beispiel wenn man Funktionen an Bibliotheken weitergibt, braucht man diese nur ein einziges mal.
Dafür will man sich nicht jedes mal einen Namen ausdenken.
Ein klassisches Beispiel dafür ist das Sortieren.

Die ~sorted~ Funktion, welche ihr bereits kennt, kann eine Datenstruktur sortieren.
Wir haben schon gesehen, wie man Listen aufsteigend und absteigend sortieren kann.
Aber was ist, wenn wir unsere eigene Reihenfolge festlegen wollen?

Angenommen, wir haben folgende Spieler-Klasse für /Kampf gegen den Kakadu/ geschrieben.

#+BEGIN_SRC python
class Player:
    def __init__(self, level, name):
        self.level = level
        self.name = name  
#+END_SRC

Jetzt wollen wir in der UI nur die Spieler nach Level sortiert anzeigen. Wie machen wir dass?

#+BEGIN_SRC python :results output :exports both
class Player:
    def __init__(self, level, name):
        self.level = level
        self.name = name
    def __repr__(self):
        return self.name + ", level: " + str(self.level)
players = [Player(42, "birdlover2000"), Player(69, "warrior420"), Player(11, "gigagünter")]
print(sorted(players, key=lambda player: player.level))
players = [Player(42, "birdlover2000"), Player(69, "warrior420"),  Player(11, "abchero"), Player(11, "gigagünter")]
print(sorted(players, key=lambda player: [player.level, player.name]))
#+END_SRC

 
Wir geben eine anonyme Funktion an, die ein ~Player~-Objekt in eine Zahl, 
Zeichenkette, oder in irgendwas das den ~<~-Operator unterstützt umwandelt.
So kann Python diese Funktion auf jedes Objekt anwenden, und dann die Sortierreihenfolge entscheiden.

Übrigens: Mann kann den ~<~ Operator auch direkt für eine Klasse definieren:
#+BEGIN_SRC python :results output :exports both
class Player:
    def __init__(self, level, name):
        self.level = level
        self.name = name
    def __repr__(self):
        return self.name + ", level: " + str(self.level)
    def __lt__(self, other):
        return self.level < other.level
players = [Player(42, "birdlover2000"), Player(69, "warrior420"), Player(11, "gigagünter")]
print(sorted(players)
#+END_SRC
