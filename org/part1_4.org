#+TITLE: Baustein 1 Meeting 4

* L√∂sungen zu den letzten Aufgaben

(Alle L√∂sungen sind nur Beispiele, es gibt viele Wege die zur L√∂sung f√ºhren)

** Funktionen
#+BEGIN_SRC python :results output :exports both
def combat(health, damage):
    difference = health - damage
    if difference < 0:
        return 0
    else return difference
print(combat(health=100, damage=20))
print(combat(health=10, damage=30))
#+END_SRC
Oder einfacher:
#+BEGIN_SRC python
def combat(health, damage):
    return max(health - damage, 0)
#+END_SRC
#+BEGIN_SRC python :results output :exports both
def abbrevName(name):
    parts = name.split(" ")
    return parts[0][0].upper() + "." +  parts[1][0].upper()
#+END_SRC
#+BEGIN_SRC python :results output :exports both
def century(year):
    return ((year-1) // 100) +1
#+END_SRC

** Number guessing game
#+BEGIN_SRC python
user_eingabe = None
geheime_zahl = 42
while user_eingabe != geheime_zahl:
    user_eingabe = int(input("Bitte gebe eine Zahl ein: "))
    if user_eingabe > geheime_zahl:
        print("Zu hoch gesch√§tzt!")
    elif user_eingabe < geheime_zahl:
        print("Zu niedrig gesch√§tzt!")
    else:
        print("Richtig")
#+END_SRC

* Mengen
Mengen sind ungeordnete Sammlungen von Objekten. Sie k√∂nnen kein Element mehrfach enthalten:

#+BEGIN_SRC python :results output :exports both
my_numbers = {1, 2, 3, 4, 5, 5, 6, 6}
print(my_numbers)
#+END_SRC

Wie auch bei Listen und Dictionarys gibt es eine Built-in Funktion die bestimmte Objekte in Mengen umwandeln kann. Nochmal zur √úbersicht:

~list(...)~

~dict(...)~

~set(...)~

Erzeugen Listen, W√∂rterb√ºcher und Mengen aus ihren Argumenten (wenn m√∂glich).


#+BEGIN_SRC python :results output :exports both
letter_set = set("A Python Tutorial")
print(letter_set)
meine_liste = ["A","B","C","A","B","C"]

leeres_w√∂rterbuch = dict()

liste_ohne_duplikate = list(set(meine_liste))
#+END_SRC

* Objektorientierte Programmierung

** Klassen und Objekte

Zusammenh√§nge in der echten Welt sind sehr komplex. Computer hingegen sind eigentlich ziemlich doof: Sie k√∂nnen nur mit exakten Rechenregeln arbeiten und stumpf Befehle ausf√ºhren. Um die Welt "berechenbar" zu machen braucht man also immer ein Modell: Ein vereinfachtes Abbild der Wirklichkeit.

Objektorientierung ist eine M√∂glichkeit, Zusammenh√§nge zu modellieren. Die Grundidee ist, jede Sache in der echten Welt als Objekt mit einem Zustand und fest definiertem Verhalten darzustellen.

Klassen sind Baupl√§ne f√ºr Objekte. Sie beschreiben, welche Funktionalit√§t ein konkretes Objekt hat, und welche Zust√§nde es besitzt. Objekte sind dann konkrete Instanzen von Klassen.

/Genauere Erkl√§rung und Diskussion √ºber OOP im Kurs/

#+BEGIN_SRC python :results output :exports both
class Dog:

    def __init__(self, name, age):
        self.age = age
        self.name = name

    def sit(self):
        print(self.name + " is now sitting.")

    def roll_over(self):
        print(self.name + " rolled over!")

    def print_age(self):
        print(self.name + " is " + str(self.age) + " years old.")


cooper = Dog("cooper", 5)
cooper.roll_over()
cooper.sit()
cooper.print_age()
#+END_SRC

** Vererbung

- Einige Klassen haben Gemeinsamkeiten und Unterschiede
- Die Gemeinsamkeiten wollen wir nicht doppelt in Code ausdr√ºcken
- Deshalb erstellen wir eine ‚ÄúElternklasse‚Äù mit den Gemeinsamkeiten und ‚Äúerben‚Äù davon.

#+BEGIN_SRC python :results output :exports both
class Animal:

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def eat(self):
        print(self.name + " isst etwas.")

    def move(self):
        print(self.name + " bewegt sich.")

class Bird(Animal):

    def fly(self):
        print("Ich kann flieeeegen - " + self.name + ".")

class Dog(Animal):

    def bark(self):
        print("Woof Woof")


class Mops(Dog):

    def bark(self):
        super().bark()
        print("fiep")

class Parrot(Bird, Dog):

    def __init__(self, name, age, color):
        super().__init__(name, age)
        self.color = color


loewe = Animal("L√∂we", 5)
loewe.eat()
loewe.move()
print("-------------")
doggie = Dog("Doggie", 7)
doggie.bark()
doggie.eat()
print("-------------")
ruffi = Mops("Ruffi", 3)
ruffi.eat()
ruffi.bark()
#+END_SRC

** √úbung: Objektorientiertes Bankkonto

Implementiert die Klasse ~Bankkonto~.

- Ein Bankkonto hat eine eindeutige ID und einen Kontostand (anf√§nglich 0)
- Man kann einen bestimmten Betrag einzahlen und auszahlen
- Man kann sich den aktuellen Kontostand ausgeben lassen
** √úbung (fortgeschritten): Piraterie
https://www.codewars.com/kata/object-oriented-piracy

* Weiterf√ºhrend: Python lernen
Der erste Teil des Kurses ist vorbei und ihr m√∂chtet alleine weitermachen? Kein Problem, es gibt mehrere M√∂glichkeiten zu √ºben.

** Coding - Katas
Unter Entwicklern hat sich eine bestimmte Trainingsmethode etabliert: Die sogenannten Katas (der Begriff kommt aus dem Kampfsport). Hierbei schreibt ein Entwickler ein Problem auf, dass es zu l√∂sen gilt. Zus√§tzlich schreibt der Herausforderer Test-Code der √úberpr√ºft, ob das Problem richtig gel√∂st wurde. Der andere Entwickler muss dann versuchen, das Problem so zu l√∂sen dass der Test erfolgreich verl√§uft.

Es gibt eine Website, auf der man diese Katas in allen Schwierigkeitsgraden l√∂sen kann: https://www.codewars.com. Meldet euch gerne dort an (wenn ihr wollt, tretet dem Clan "moinworld" bei üòâ). Eine unterhaltsame M√∂glichkeit zum √úben :)

Viele Aufgaben aus diesem Kurs sind von codewars. Hier die komplette Liste, falls ihr daf√ºr die Punkte holen wollt:

https://www.codewars.com/kata/drink-about/python

https://www.codewars.com/kata/thinkful-logic-drills-traffic-light

https://www.codewars.com/kata/sum-of-multiples

http://www.codewars.com/kata/century-from-year/train/python

http://www.codewars.com/kata/grasshopper-terminal-game-combat-function-1/train/python

http://www.codewars.com/kata/abbreviate-a-two-word-name/train/python

F√ºr unser Erfahrungslevel sind Kata der Schwierigkeitsstufe 8 und 7 (sprache Python!) geeignet.

http://www.codewars.com/kata/search/python?q=&r%5B%5D=-8&r%5B%5D=-7&beta=false

** Online - Kurse

Generell eine gute Resource um selbst zu lernen ist der Kurs von codecadamy: https://www.codecademy.com/learn/learn-python Dort gibt es interaktive Erkl√§rungen zum Stoff und auch √úbungsaufgaben die ganz genau erkl√§rt und mit Hinweisen best√ºckt sind. Aber vorsicht: Dieser Kurs lehrt die Python Version zwei. Ist aber wie bereits erw√§hnt nicht schlimm, da der Unterschied zwischen Python 2 und 3 nicht gro√ü ist. Es gibt auch einen Kurs f√ºr Python3, Kostet aber ziemlich viel (Mitgliedschaft f√ºr ~ 20‚Ç¨ /Monat), immerhin gibt es eine kostenlose 7 Tage mitgliedschaft.

Dar√ºber hinaus gibt es noch unz√§hlige Kurse, sogar mobile Apps zum Lernen. Die habe ich nat√ºrlich nicht alle ausprobiert, aber generell sind solche Kurse zumindest vom Inhalt in guter Qualit√§t. Das beste ist, etwas zu suchen was einem Spass macht und voran bringt.

** Eigene Projekte

F√ºr die Motivation super: Ein eigenes Projekt ausdenken (nicht zu schwierig!) und einfach kraft Suchmaschine und Entwicklerforen wie stackoverflow.com / moinworld slack umsetzen.
